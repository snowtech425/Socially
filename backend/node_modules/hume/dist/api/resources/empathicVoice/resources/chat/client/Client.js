"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chat = void 0;
/** THIS FILE IS MANUALLY MAINAINED: see .fernignore */
const environments = __importStar(require("../../../../../../environments"));
const core = __importStar(require("../../../../../../core"));
const qs_1 = __importDefault(require("qs"));
const Socket_1 = require("./Socket");
const version_1 = require("../../../../../../version");
class Chat {
    constructor(_options) {
        this._options = _options;
    }
    connect(args = {}) {
        var _a, _b, _c;
        const queryParams = {};
        queryParams["fernSdkLanguage"] = "JavaScript";
        queryParams["fernSdkVersion"] = version_1.SDK_VERSION;
        if (this._options.accessToken != null) {
            queryParams["accessToken"] = this._options.accessToken;
        }
        else if (this._options.apiKey != null) {
            queryParams["apiKey"] = this._options.apiKey;
        }
        if (args.configId !== null && args.configId !== undefined && args.configId !== "") {
            queryParams["config_id"] = args.configId;
        }
        if (args.configVersion !== null && args.configVersion !== undefined && args.configVersion !== "") {
            queryParams["config_version"] = args.configVersion;
        }
        if (args.resumedChatGroupId !== null &&
            args.resumedChatGroupId !== undefined &&
            args.resumedChatGroupId !== "") {
            queryParams["resumed_chat_group_id"] = args.resumedChatGroupId;
        }
        if (args.verboseTranscription !== null) {
            queryParams["verbose_transcription"] = args.verboseTranscription ? "true" : "false";
        }
        if (args.queryParams !== null && args.queryParams !== undefined) {
            for (const [name, value] of Object.entries(args.queryParams)) {
                queryParams[name] = value;
            }
        }
        const socket = new core.ReconnectingWebSocket(`wss://${((_a = core.Supplier.get(this._options.environment)) !== null && _a !== void 0 ? _a : environments.HumeEnvironment.Production).replace("https://", "")}/v0/evi/chat?${qs_1.default.stringify(queryParams)}`, [], {
            debug: (_b = args.debug) !== null && _b !== void 0 ? _b : false,
            maxRetries: (_c = args.reconnectAttempts) !== null && _c !== void 0 ? _c : 30,
        });
        return new Socket_1.ChatSocket({
            socket,
        });
    }
}
exports.Chat = Chat;
