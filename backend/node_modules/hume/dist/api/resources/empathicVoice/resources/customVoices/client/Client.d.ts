/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
export declare namespace CustomVoices {
    interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class CustomVoices {
    protected readonly _options: CustomVoices.Options;
    constructor(_options?: CustomVoices.Options);
    /**
     * Fetches a paginated list of **Custom Voices**.
     *
     * Refer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.
     *
     * @param {Hume.empathicVoice.CustomVoicesListCustomVoicesRequest} request
     * @param {CustomVoices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.customVoices.listCustomVoices()
     */
    listCustomVoices(request?: Hume.empathicVoice.CustomVoicesListCustomVoicesRequest, requestOptions?: CustomVoices.RequestOptions): Promise<Hume.empathicVoice.ReturnPagedCustomVoices>;
    /**
     * Creates a **Custom Voice** that can be added to an [EVI configuration](/reference/empathic-voice-interface-evi/configs/create-config).
     *
     * Refer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.
     *
     * @param {Hume.empathicVoice.PostedCustomVoice} request
     * @param {CustomVoices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.customVoices.createCustomVoice({
     *         name: "name",
     *         baseVoice: Hume.empathicVoice.PostedCustomVoiceBaseVoice.Ito,
     *         parameterModel: "20241004-11parameter"
     *     })
     */
    createCustomVoice(request: Hume.empathicVoice.PostedCustomVoice, requestOptions?: CustomVoices.RequestOptions): Promise<Hume.empathicVoice.ReturnCustomVoice>;
    /**
     * Fetches a specific **Custom Voice** by ID.
     *
     * Refer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.
     *
     * @param {string} id - Identifier for a Custom Voice. Formatted as a UUID.
     * @param {CustomVoices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.customVoices.getCustomVoice("id")
     */
    getCustomVoice(id: string, requestOptions?: CustomVoices.RequestOptions): Promise<Hume.empathicVoice.ReturnCustomVoice>;
    /**
     * Updates a **Custom Voice** by creating a new version of the **Custom Voice**.
     *
     * Refer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.
     *
     * @param {string} id - Identifier for a Custom Voice. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedCustomVoice} request
     * @param {CustomVoices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.customVoices.createCustomVoiceVersion("id", {
     *         name: "name",
     *         baseVoice: Hume.empathicVoice.PostedCustomVoiceBaseVoice.Ito,
     *         parameterModel: "20241004-11parameter"
     *     })
     */
    createCustomVoiceVersion(id: string, request: Hume.empathicVoice.PostedCustomVoice, requestOptions?: CustomVoices.RequestOptions): Promise<Hume.empathicVoice.ReturnCustomVoice>;
    /**
     * Deletes a **Custom Voice** and its versions.
     *
     * Refer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.
     *
     * @param {string} id - Identifier for a Custom Voice. Formatted as a UUID.
     * @param {CustomVoices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.customVoices.deleteCustomVoice("id")
     */
    deleteCustomVoice(id: string, requestOptions?: CustomVoices.RequestOptions): Promise<void>;
    /**
     * Updates the name of a **Custom Voice**.
     *
     * Refer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.
     *
     * @param {string} id - Identifier for a Custom Voice. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedCustomVoiceName} request
     * @param {CustomVoices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     */
    updateCustomVoiceName(id: string, request: Hume.empathicVoice.PostedCustomVoiceName, requestOptions?: CustomVoices.RequestOptions): Promise<string>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-Hume-Api-Key": string | undefined;
    }>;
}
