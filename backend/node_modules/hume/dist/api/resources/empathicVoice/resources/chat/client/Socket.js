"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatSocket = void 0;
/** THIS FILE IS MANUALLY MAINAINED: see .fernignore */
const core = __importStar(require("../../../../../../core"));
const errors = __importStar(require("../../../../../../errors"));
const serializers = __importStar(require("../../../../../../serialization/index"));
class ChatSocket {
    constructor({ socket }) {
        this.eventHandlers = {};
        this.handleOpen = () => {
            var _a, _b;
            (_b = (_a = this.eventHandlers).open) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        this.handleMessage = (event) => {
            var _a, _b, _c, _d;
            const data = JSON.parse(event.data);
            const parsedResponse = serializers.empathicVoice.SubscribeEvent.parse(data, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
            if (parsedResponse.ok) {
                (_b = (_a = this.eventHandlers).message) === null || _b === void 0 ? void 0 : _b.call(_a, Object.assign(Object.assign({}, parsedResponse.value), { receivedAt: new Date() }));
            }
            else {
                (_d = (_c = this.eventHandlers).error) === null || _d === void 0 ? void 0 : _d.call(_c, new Error(`Received unknown message type`));
            }
        };
        this.handleClose = (event) => {
            var _a, _b;
            (_b = (_a = this.eventHandlers).close) === null || _b === void 0 ? void 0 : _b.call(_a, event);
        };
        this.handleError = (event) => {
            var _a, _b, _c;
            const message = (_a = event.message) !== null && _a !== void 0 ? _a : "core.ReconnectingWebSocket error";
            (_c = (_b = this.eventHandlers).error) === null || _c === void 0 ? void 0 : _c.call(_b, new Error(message));
        };
        this.socket = socket;
        this.socket.addEventListener("open", this.handleOpen);
        this.socket.addEventListener("message", this.handleMessage);
        this.socket.addEventListener("close", this.handleClose);
        this.socket.addEventListener("error", this.handleError);
    }
    /**
     * The current state of the connection; this is one of the Ready state constants
     */
    get readyState() {
        return this.socket.readyState;
    }
    /**
     * @param event - The event to attach to.
     * @param callback - The callback to run when the event is triggered.
     *
     * @example
     * ```ts
     * const socket = hume.empathicVoice.chat.connect({ apiKey: "...." });
     * socket.on('open', () => {
     *  console.log('Socket opened');
     * });
     * ```
     */
    on(event, callback) {
        this.eventHandlers[event] = callback;
    }
    /**
     * Send audio input
     */
    sendAudioInput(message) {
        this.assertSocketIsOpen();
        this.sendJson(Object.assign({ type: "audio_input" }, message));
    }
    /**
     * Send session settings
     */
    sendSessionSettings(message = {}) {
        this.assertSocketIsOpen();
        this.sendJson(Object.assign({ type: "session_settings" }, message));
    }
    /**
     * Send assistant input
     */
    sendAssistantInput(message) {
        this.assertSocketIsOpen();
        this.sendJson(Object.assign({ type: "assistant_input" }, message));
    }
    /**
     * Send pause assistant message
     */
    pauseAssistant(message = {}) {
        this.assertSocketIsOpen();
        this.sendJson(Object.assign({ type: "pause_assistant_message" }, message));
    }
    /**
     * Send resume assistant message
     */
    resumeAssistant(message = {}) {
        this.assertSocketIsOpen();
        this.sendJson(Object.assign({ type: "resume_assistant_message" }, message));
    }
    /**
     * Send tool response message
     */
    sendToolResponseMessage(message) {
        this.assertSocketIsOpen();
        this.sendJson(Object.assign({ type: "tool_response" }, message));
    }
    /**
     * Send tool error message
     */
    sendToolErrorMessage(message) {
        this.assertSocketIsOpen();
        this.sendJson(Object.assign({ type: "tool_error" }, message));
    }
    /**
     * Send text input
     */
    sendUserInput(text) {
        this.assertSocketIsOpen();
        this.sendJson({
            type: "user_input",
            text,
        });
    }
    /**
     * @name connect
     * @description
     * Connect to the core.ReconnectingWebSocket.
     */
    connect() {
        this.socket.reconnect();
        this.socket.addEventListener("open", this.handleOpen);
        this.socket.addEventListener("message", this.handleMessage);
        this.socket.addEventListener("close", this.handleClose);
        this.socket.addEventListener("error", this.handleError);
        return this;
    }
    /**
     * Closes the underlying socket.
     */
    close() {
        this.socket.close();
        this.handleClose({ code: 1000 });
        this.socket.removeEventListener("open", this.handleOpen);
        this.socket.removeEventListener("message", this.handleMessage);
        this.socket.removeEventListener("close", this.handleClose);
        this.socket.removeEventListener("error", this.handleError);
    }
    tillSocketOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.socket.readyState === core.ReconnectingWebSocket.OPEN) {
                return this.socket;
            }
            return new Promise((resolve, reject) => {
                this.socket.addEventListener("open", () => {
                    resolve(this.socket);
                });
                this.socket.addEventListener("error", (event) => {
                    reject(event);
                });
            });
        });
    }
    assertSocketIsOpen() {
        if (!this.socket) {
            throw new errors.HumeError({ message: "Socket is not connected." });
        }
        if (this.socket.readyState !== core.ReconnectingWebSocket.OPEN) {
            throw new errors.HumeError({ message: "Socket is not open." });
        }
    }
    sendJson(payload) {
        const jsonPayload = serializers.empathicVoice.PublishEvent.jsonOrThrow(payload, {
            unrecognizedObjectKeys: "strip",
        });
        this.socket.send(JSON.stringify(jsonPayload));
    }
}
exports.ChatSocket = ChatSocket;
