/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
export declare namespace Tools {
    interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Tools {
    protected readonly _options: Tools.Options;
    constructor(_options?: Tools.Options);
    /**
     * Fetches a paginated list of **Tools**.
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {Hume.empathicVoice.ToolsListToolsRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.listTools({
     *         pageNumber: 0,
     *         pageSize: 2
     *     })
     */
    listTools(request?: Hume.empathicVoice.ToolsListToolsRequest, requestOptions?: Tools.RequestOptions): Promise<core.Page<Hume.empathicVoice.ReturnUserDefinedTool | undefined>>;
    /**
     * Creates a **Tool** that can be added to an [EVI configuration](/reference/empathic-voice-interface-evi/configs/create-config).
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {Hume.empathicVoice.PostedUserDefinedTool} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.createTool({
     *         name: "get_current_weather",
     *         parameters: "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
     *         versionDescription: "Fetches current weather and uses celsius or fahrenheit based on location of user.",
     *         description: "This tool is for getting the current weather.",
     *         fallbackContent: "Unable to fetch current weather."
     *     })
     */
    createTool(request: Hume.empathicVoice.PostedUserDefinedTool, requestOptions?: Tools.RequestOptions): Promise<Hume.empathicVoice.ReturnUserDefinedTool | undefined>;
    /**
     * Fetches a list of a **Tool's** versions.
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {Hume.empathicVoice.ToolsListToolVersionsRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.listToolVersions("00183a3f-79ba-413d-9f3b-609864268bea")
     */
    listToolVersions(id: string, request?: Hume.empathicVoice.ToolsListToolVersionsRequest, requestOptions?: Tools.RequestOptions): Promise<Hume.empathicVoice.ReturnPagedUserDefinedTools>;
    /**
     * Updates a **Tool** by creating a new version of the **Tool**.
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedUserDefinedToolVersion} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.createToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", {
     *         parameters: "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
     *         versionDescription: "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
     *         fallbackContent: "Unable to fetch current weather.",
     *         description: "This tool is for getting the current weather."
     *     })
     */
    createToolVersion(id: string, request: Hume.empathicVoice.PostedUserDefinedToolVersion, requestOptions?: Tools.RequestOptions): Promise<Hume.empathicVoice.ReturnUserDefinedTool | undefined>;
    /**
     * Deletes a **Tool** and its versions.
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.deleteTool("00183a3f-79ba-413d-9f3b-609864268bea")
     */
    deleteTool(id: string, requestOptions?: Tools.RequestOptions): Promise<void>;
    /**
     * Updates the name of a **Tool**.
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedUserDefinedToolName} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.updateToolName("00183a3f-79ba-413d-9f3b-609864268bea", {
     *         name: "get_current_temperature"
     *     })
     */
    updateToolName(id: string, request: Hume.empathicVoice.PostedUserDefinedToolName, requestOptions?: Tools.RequestOptions): Promise<string>;
    /**
     * Fetches a specified version of a **Tool**.
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {number} version - Version number for a Tool.
     *
     *                           Tools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.getToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", 1)
     */
    getToolVersion(id: string, version: number, requestOptions?: Tools.RequestOptions): Promise<Hume.empathicVoice.ReturnUserDefinedTool | undefined>;
    /**
     * Deletes a specified version of a **Tool**.
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {number} version - Version number for a Tool.
     *
     *                           Tools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.deleteToolVersion("00183a3f-79ba-413d-9f3b-609864268bea", 1)
     */
    deleteToolVersion(id: string, version: number, requestOptions?: Tools.RequestOptions): Promise<void>;
    /**
     * Updates the description of a specified **Tool** version.
     *
     * Refer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.
     *
     * @param {string} id - Identifier for a Tool. Formatted as a UUID.
     * @param {number} version - Version number for a Tool.
     *
     *                           Tools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.
     *
     *                           Version numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number.
     * @param {Hume.empathicVoice.PostedUserDefinedToolVersionDescription} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Hume.empathicVoice.BadRequestError}
     *
     * @example
     *     await client.empathicVoice.tools.updateToolDescription("00183a3f-79ba-413d-9f3b-609864268bea", 1, {
     *         versionDescription: "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region."
     *     })
     */
    updateToolDescription(id: string, version: number, request?: Hume.empathicVoice.PostedUserDefinedToolVersionDescription, requestOptions?: Tools.RequestOptions): Promise<Hume.empathicVoice.ReturnUserDefinedTool | undefined>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-Hume-Api-Key": string | undefined;
    }>;
}
